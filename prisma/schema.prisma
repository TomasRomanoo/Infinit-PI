generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(45)
}

model vehicle {
  idvehicle            Int      @id @default(autoincrement())
  plate                String   @db.VarChar(45)
  model                String   @db.VarChar(45)
  detail               String   @db.Text
  year                 Int
  price_per_day        Float
  long_description     String   @db.Text
  short_description    String   @db.VarChar(45)
  brandId              Int
  categoryId           Int
  review_idreview      Int
  review_user_iduser   Int
  order_idorder        Int
  order_payment_method_idpayment_method Int
  order_order_status_idorder_status     Int
  name                 String?  @db.VarChar(45)

  brand                brand    @relation(fields: [brandId], references: [idbrand], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_brand1")
  category             category @relation(fields: [categoryId], references: [idcategory], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_category1")
  review               review   @relation(fields: [review_idreview, review_user_iduser], references: [idreview, user_iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_review1")
  order                order    @relation(fields: [order_idorder, order_payment_method_idpayment_method, order_order_status_idorder_status], references: [idorder, payment_method_idpayment_method, order_status_idorder_status], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_order1")

  reservation           reservation[] // Add the opposite relation field

  vehicle_has_dealer      vehicle_has_dealer[]
  vehicle_has_specification vehicle_has_specification[]
  vehicle_image            vehicle_image[]

  @@index([brandId], map: "fk_vehicle_brand1_idx")
  @@index([categoryId], map: "fk_vehicle_category1_idx")
  @@index([order_idorder, order_payment_method_idpayment_method, order_order_status_idorder_status], map: "fk_vehicle_order1_idx")
  @@index([review_idreview, review_user_iduser], map: "fk_vehicle_review1_idx")
}


model addon {
  idaddon         Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  description     String            @db.Text
  price           Float
  order_has_addon order_has_addon[]
}

model address {
  idaddress Int    @id @default(autoincrement())
  country   String @db.VarChar(45)
  state     String @db.VarChar(45)
  city      String @db.VarChar(45)
  zip_code  Int
  user      user[]
}

model brand {
  idbrand  Int       @id @default(autoincrement())
  name     String    @db.VarChar(45)
  logo_url String    @db.VarChar(200)
  vehicle  vehicle[]
}

model category {
  idcategory Int       @id @default(autoincrement())
  name       String    @db.VarChar(45)
  vehicle    vehicle[]
}

model checkin_address {
  idcheckin_address Int           @id @default(autoincrement())
  country           String        @db.VarChar(45)
  state             String        @db.VarChar(45)
  city              String        @db.VarChar(45)
  zip_code          String        @db.VarChar(45)
  reservation       reservation[]
}

model checkout_address {
  idcheckout_address Int           @id @default(autoincrement())
  country            String        @db.VarChar(45)
  state              String        @db.VarChar(45)
  city               String        @db.VarChar(45)
  zip_code           String        @db.VarChar(45)
  reservation        reservation[]
}

model dealer {
  iddealer           Int                  @id @default(autoincrement())
  country            String               @db.VarChar(45)
  state              String               @db.VarChar(45)
  city               String               @db.VarChar(45)
  zip_code           String               @db.VarChar(45)
  vehicle_has_dealer vehicle_has_dealer[]
}

model insurance {
  idinsurance         Int                   @id @default(autoincrement())
  description         String                @db.Text
  price               Float
  insurance_has_order insurance_has_order[]
}

model insurance_has_order {
  insurance_idinsurance Int
  order_idorder         Int
  insurance             insurance @relation(fields: [insurance_idinsurance], references: [idinsurance])
  order                 order     @relation(fields: [order_idorder], references: [idorder])

  @@id([insurance_idinsurance, order_idorder])
  @@index([insurance_idinsurance], map: "fk_insurance_has_order_insurance1_idx")
  @@index([order_idorder], map: "fk_insurance_has_order_order1_idx")
}


model order {
  idorder                         Int                   @id @default(autoincrement())
  total                           Float
  payment_method_idpayment_method Int
  order_status_idorder_status     Int
  user_iduser                     Int
  reservation_idreservation       Int
  insurance_has_order             insurance_has_order[]
  order_status                    order_status          @relation(fields: [order_status_idorder_status], references: [idorder_status], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_order_status1")
  payment_method                  payment_method        @relation(fields: [payment_method_idpayment_method], references: [idpayment_method], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_payment_method1")
  reservation                     reservation           @relation(fields: [reservation_idreservation], references: [idreservation], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_reservation1")
  user                            user                  @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_user1")
  order_has_addon                 order_has_addon[]
  vehicle                         vehicle[]

  @@index([order_status_idorder_status], map: "fk_order_order_status1_idx")
  @@index([payment_method_idpayment_method], map: "fk_order_payment_method1_idx")
  @@index([reservation_idreservation], map: "fk_order_reservation1_idx")
  @@index([user_iduser], map: "fk_order_user1_idx")
  @@unique([idorder, payment_method_idpayment_method, order_status_idorder_status]) // Add the unique constraint
}




model order_has_addon {
  order_idorder Int
  addon_idaddon Int
  addon         addon @relation(fields: [addon_idaddon], references: [idaddon], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_has_addon_addon1")
  order         order @relation(fields: [order_idorder], references: [idorder], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_has_addon_order1")

  @@id([order_idorder, addon_idaddon])
  @@index([addon_idaddon], map: "fk_order_has_addon_addon1_idx")
  @@index([order_idorder], map: "fk_order_has_addon_order1_idx")
}

model order_status {
  idorder_status Int     @id @default(autoincrement())
  status         String  @db.VarChar(45)
  order          order[]
}

model payment_method {
  idpayment_method Int     @id @default(autoincrement())
  name             String  @db.VarChar(45)
  order            order[]
}

model reservation {
  idreservation                       Int              @id @default(autoincrement()) @unique
  starting_date                       DateTime         @db.Date
  end_date                            DateTime         @db.Date
  checkin_hour                        DateTime         @db.Time(0)
  checkout_hour                       DateTime         @db.Time(0)
  checkin_address_idcheckin_address   Int
  checkout_address_idcheckout_address Int
  vehicle_idvehicle                   Int
  order                               order[]
  checkin_address                     checkin_address  @relation(fields: [checkin_address_idcheckin_address], references: [idcheckin_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservation_checkin_address1")
  checkout_address                    checkout_address @relation(fields: [checkout_address_idcheckout_address], references: [idcheckout_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservation_checkout_address1")
  vehicle                             vehicle          @relation(fields: [vehicle_idvehicle], references: [idvehicle], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservation_vehicle1")

  @@index([checkin_address_idcheckin_address], map: "fk_reservation_checkin_address1_idx")
  @@index([checkout_address_idcheckout_address], map: "fk_reservation_checkout_address1_idx")
  @@index([vehicle_idvehicle], map: "fk_reservation_vehicle1_idx")
}



model review {
  idreview      Int       @default(autoincrement())
  qualification Float
  review        String    @db.Text
  user_iduser   Int
  user          user      @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_user1")
  vehicle       vehicle[]

  @@id([idreview, user_iduser])
  @@index([user_iduser], map: "fk_review_user1_idx")
}

model role {
  idrole Int    @id @default(autoincrement())
  name   String @db.VarChar(45)
  user   user[]
}

model specification {
  idspecification           Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(45)
  value                     String                      @db.VarChar(45)
  image                     String                      @db.VarChar(200)
  vehicle_has_specification vehicle_has_specification[]
}

model user {
  iduser            Int      @id @default(autoincrement())
  first_name        String   @db.VarChar(45)
  last_name         String   @db.VarChar(45)
  phone             String   @db.VarChar(45)
  email             String   @db.VarChar(80)
  password          String   @db.VarChar(200)
  role_idrole       Int
  address_idaddress Int
  order             order[]
  review            review[]
  address           address  @relation(fields: [address_idaddress], references: [idaddress], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_address1")
  role              role     @relation(fields: [role_idrole], references: [idrole], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")

  @@index([address_idaddress], map: "fk_user_address1_idx")
  @@index([role_idrole], map: "fk_user_role_idx")
}



model vehicle_has_dealer {
  vehicle_idvehicle Int
  dealer_iddealer   Int
  dealer            dealer  @relation(fields: [dealer_iddealer], references: [iddealer], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_has_dealer_dealer1")
  vehicle           vehicle @relation(fields: [vehicle_idvehicle], references: [idvehicle], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_has_dealer_vehicle1")

  @@id([vehicle_idvehicle, dealer_iddealer])
  @@index([dealer_iddealer], map: "fk_vehicle_has_dealer_dealer1_idx")
  @@index([vehicle_idvehicle], map: "fk_vehicle_has_dealer_vehicle1_idx")
}

model vehicle_has_specification {
  vehicle_idvehicle             Int
  specification_idspecification Int
  specification                 specification @relation(fields: [specification_idspecification], references: [idspecification], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_has_specification_specification1")
  vehicle                       vehicle       @relation(fields: [vehicle_idvehicle], references: [idvehicle], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicle_has_specification_vehicle1")

  @@id([vehicle_idvehicle, specification_idspecification])
  @@index([specification_idspecification], map: "fk_vehicle_has_specification_specification1_idx")
  @@index([vehicle_idvehicle], map: "fk_vehicle_has_specification_vehicle1_idx")
}

model vehicle_image {
  idproduct_image   Int     @id @default(autoincrement())
  url               String  @db.VarChar(255)
  vehicle_idvehicle Int
  vehicle           vehicle @relation(fields: [vehicle_idvehicle], references: [idvehicle], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_image_vehicle1")

  @@index([vehicle_idvehicle], map: "fk_product_image_vehicle1_idx")
}

